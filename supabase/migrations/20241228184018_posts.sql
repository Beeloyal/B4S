create type "public"."channel" as enum ('email', 'push', 'feed');

create table "public"."local_posts" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "local" integer not null,
    "creator" uuid,
    "title" text not null,
    "content" text not null,
    "image_url" text,
    "channels" channel[] not null
);


CREATE UNIQUE INDEX local_posts_pkey ON public.local_posts USING btree (id);

alter table "public"."local_posts" add constraint "local_posts_pkey" PRIMARY KEY using index "local_posts_pkey";

alter table "public"."local_posts" add constraint "local_posts_creator_fkey" FOREIGN KEY (creator) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."local_posts" validate constraint "local_posts_creator_fkey";

alter table "public"."local_posts" add constraint "local_posts_local_fkey" FOREIGN KEY (local) REFERENCES locals(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."local_posts" validate constraint "local_posts_local_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_app_id(app_id text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    IF(((current_setting('request.headers'::text, true))::json ->> 'x-app-id'::text) IS NOT NULL)
    THEN
      IF(((current_setting('request.headers'::text, true))::json ->> 'x-app-id'::text) LIKE app_id || '%')
      THEN
        RETURN TRUE;
      END IF;

      RETURN FALSE;
    END IF;

    IF(get_user_app_id() LIKE app_id || '%')
    THEN
      RETURN TRUE;
    END IF;

    RETURN FALSE;
END;$function$
;

grant delete on table "public"."local_posts" to "anon";

grant insert on table "public"."local_posts" to "anon";

grant references on table "public"."local_posts" to "anon";

grant select on table "public"."local_posts" to "anon";

grant trigger on table "public"."local_posts" to "anon";

grant truncate on table "public"."local_posts" to "anon";

grant update on table "public"."local_posts" to "anon";

grant delete on table "public"."local_posts" to "authenticated";

grant insert on table "public"."local_posts" to "authenticated";

grant references on table "public"."local_posts" to "authenticated";

grant select on table "public"."local_posts" to "authenticated";

grant trigger on table "public"."local_posts" to "authenticated";

grant truncate on table "public"."local_posts" to "authenticated";

grant update on table "public"."local_posts" to "authenticated";

grant delete on table "public"."local_posts" to "service_role";

grant insert on table "public"."local_posts" to "service_role";

grant references on table "public"."local_posts" to "service_role";

grant select on table "public"."local_posts" to "service_role";

grant trigger on table "public"."local_posts" to "service_role";

grant truncate on table "public"."local_posts" to "service_role";

grant update on table "public"."local_posts" to "service_role";


