create type "public"."channel" as enum ('email', 'push', 'feed');

create table "public"."local_posts" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "local" integer not null,
    "creator" uuid,
    "title" text not null,
    "content" text not null,
    "image_url" text,
    "channels" channel[] not null
);


CREATE UNIQUE INDEX local_posts_pkey ON public.local_posts USING btree (id);

alter table "public"."local_posts" add constraint "local_posts_pkey" PRIMARY KEY using index "local_posts_pkey";

alter table "public"."local_posts" add constraint "local_posts_creator_fkey" FOREIGN KEY (creator) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."local_posts" validate constraint "local_posts_creator_fkey";

alter table "public"."local_posts" add constraint "local_posts_local_fkey" FOREIGN KEY (local) REFERENCES locals(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."local_posts" validate constraint "local_posts_local_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_app_id(app_id text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    IF(((current_setting('request.headers'::text, true))::json ->> 'x-app-id'::text) IS NOT NULL)
    THEN
      IF(((current_setting('request.headers'::text, true))::json ->> 'x-app-id'::text) LIKE app_id || '%')
      THEN
        RETURN TRUE;
      END IF;

      RETURN FALSE;
    END IF;

    IF(get_user_app_id() LIKE app_id || '%')
    THEN
      RETURN TRUE;
    END IF;

    RETURN FALSE;
END;$function$
;

grant delete on table "public"."local_posts" to "anon";

grant insert on table "public"."local_posts" to "anon";

grant references on table "public"."local_posts" to "anon";

grant select on table "public"."local_posts" to "anon";

grant trigger on table "public"."local_posts" to "anon";

grant truncate on table "public"."local_posts" to "anon";

grant update on table "public"."local_posts" to "anon";

grant delete on table "public"."local_posts" to "authenticated";

grant insert on table "public"."local_posts" to "authenticated";

grant references on table "public"."local_posts" to "authenticated";

grant select on table "public"."local_posts" to "authenticated";

grant trigger on table "public"."local_posts" to "authenticated";

grant truncate on table "public"."local_posts" to "authenticated";

grant update on table "public"."local_posts" to "authenticated";

grant delete on table "public"."local_posts" to "service_role";

grant insert on table "public"."local_posts" to "service_role";

grant references on table "public"."local_posts" to "service_role";

grant select on table "public"."local_posts" to "service_role";

grant trigger on table "public"."local_posts" to "service_role";

grant truncate on table "public"."local_posts" to "service_role";

grant update on table "public"."local_posts" to "service_role";

drop trigger if exists "reward_confirmation_request_notification" on "public"."transaction_units";

drop trigger if exists "transaction_completed_notification" on "public"."transactions";

alter table "public"."customers" drop constraint "customers_account_fkey1";

alter table "public"."local_posts" enable row level security;

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_access(local_id integer)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  RETURN check_app_id('app.beeloyal.employer') AND (is_employer(local_id) OR is_business_owner(local_id));
END;$function$
;

CREATE OR REPLACE FUNCTION public.check_customer_access()
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  RETURN check_app_id('app.beeloyal.customer');
END;$function$
;

CREATE OR REPLACE FUNCTION public.get_supabase_url()
 RETURNS text
 LANGUAGE plpgsql
AS $function$BEGIN
  RETURN 'https://cfrwepxesctjdwtkmfas.supabase.co';
END;$function$
;

create policy "Business insert"
on "public"."local_posts"
as permissive
for insert
to authenticated
with check (check_access(local));


create policy "Business select"
on "public"."local_posts"
as permissive
for select
to authenticated
using (check_access(local));


create policy "Customer select"
on "public"."local_posts"
as permissive
for select
to authenticated
using (check_customer_access());

create policy "Business insert"
on "storage"."objects"
as permissive
for insert
to authenticated
with check ((check_app_id('app.beeloyal.employer'::text) AND (bucket_id = 'local_posts'::text)));


CREATE TRIGGER reward_confirmation_request_notification AFTER UPDATE ON public.transaction_units FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://cfrwepxesctjdwtkmfas.supabase.co/functions/v1/rewardConfirmationRequestNotification', 'POST', '{"Content-type":"application/json"}', '{}', '5000');

CREATE TRIGGER transaction_completed_notification AFTER UPDATE ON public.transactions FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://cfrwepxesctjdwtkmfas.supabase.co/functions/v1/transactionCompletedNotification', 'POST', '{"Content-type":"application/json"}', '{}', '5000');

CREATE OR REPLACE FUNCTION public.handle_new_post()
RETURNS TRIGGER AS $$
BEGIN
  PERFORM
    net.http_post(
      url := public.get_supabase_url() || '/functions/v1/postNotification',
      body := json_build_object(
        'id', NEW.id,
        'local', NEW.local,
        'title', NEW.title,
        'content', NEW.content,
        'channels', NEW.channels
      )::jsonb
    );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_post_created
  AFTER INSERT ON public.local_posts
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_post();